
zadanie3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000690  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c9d  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <debounce>:


#define DEBOUNCE_TIME 20 /* miliseconds */

uint8_t debounce(uint8_t button) {
  if (bit_is_clear(BTN_PIN, button)) { /* button is pressed now */
  80:	26 b1       	in	r18, 0x06	; 6
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	08 2e       	mov	r0, r24
  86:	02 c0       	rjmp	.+4      	; 0x8c <debounce+0xc>
  88:	35 95       	asr	r19
  8a:	27 95       	ror	r18
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <debounce+0x8>
  90:	20 ff       	sbrs	r18, 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <debounce+0x18>
    _delay_ms(DEBOUNCE_TIME);
    if (bit_is_clear(BTN_PIN, button)) { /* still pressed */
      return 1;
    }
  }
  return 0;
  94:	80 e0       	ldi	r24, 0x00	; 0
}
  96:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	39 ef       	ldi	r19, 0xF9	; 249
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	40 40       	sbci	r20, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <debounce+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <debounce+0x28>
  a8:	00 00       	nop
#define DEBOUNCE_TIME 20 /* miliseconds */

uint8_t debounce(uint8_t button) {
  if (bit_is_clear(BTN_PIN, button)) { /* button is pressed now */
    _delay_ms(DEBOUNCE_TIME);
    if (bit_is_clear(BTN_PIN, button)) { /* still pressed */
  aa:	26 b1       	in	r18, 0x06	; 6
      return 1;
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <debounce+0x36>
  b2:	55 95       	asr	r21
  b4:	47 95       	ror	r20
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <debounce+0x32>
  ba:	ca 01       	movw	r24, r20
  bc:	81 70       	andi	r24, 0x01	; 1
  be:	99 27       	eor	r25, r25
  c0:	51 e0       	ldi	r21, 0x01	; 1
  c2:	85 27       	eor	r24, r21
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	08 95       	ret

000000c8 <main>:
  return 0;
}

int main(void) {

  BTN_PORT |= _BV(BTN_RESET);
  c8:	40 9a       	sbi	0x08, 0	; 8
  BTN_PORT |= _BV(BTN_PREV);
  ca:	42 9a       	sbi	0x08, 2	; 8
  BTN_PORT |= _BV(BTN_NEXT);
  cc:	41 9a       	sbi	0x08, 1	; 8
  LED_DDR |= 0b11111111;
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a b9       	out	0x0a, r24	; 10

  UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  d4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  d8:	87 7e       	andi	r24, 0xE7	; 231
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

  uint8_t counter = 0;
  de:	80 e0       	ldi	r24, 0x00	; 0


#define DEBOUNCE_TIME 20 /* miliseconds */

uint8_t debounce(uint8_t button) {
  if (bit_is_clear(BTN_PIN, button)) { /* button is pressed now */
  e0:	30 9b       	sbis	0x06, 0	; 6
  e2:	16 c0       	rjmp	.+44     	; 0x110 <main+0x48>
  e4:	31 9b       	sbis	0x06, 1	; 6
  e6:	21 c0       	rjmp	.+66     	; 0x12a <main+0x62>
  e8:	32 99       	sbic	0x06, 2	; 6
  ea:	fa cf       	rjmp	.-12     	; 0xe0 <main+0x18>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	39 ef       	ldi	r19, 0xF9	; 249
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x2a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x34>
  fc:	00 00       	nop
    _delay_ms(DEBOUNCE_TIME);
    if (bit_is_clear(BTN_PIN, button)) { /* still pressed */
  fe:	32 99       	sbic	0x06, 2	; 6
 100:	ef cf       	rjmp	.-34     	; 0xe0 <main+0x18>
    } else if (debounce(BTN_NEXT)) {
        LED_PORT = ((++counter) ^ (counter >> 1));
        // next gray code
    } else if (debounce(BTN_PREV)) {
        // prev gray code
        LED_PORT = ((--counter) ^ (counter >> 1));
 102:	81 50       	subi	r24, 0x01	; 1
 104:	98 2f       	mov	r25, r24
 106:	96 95       	lsr	r25
 108:	98 27       	eor	r25, r24
 10a:	9b b9       	out	0x0b, r25	; 11


#define DEBOUNCE_TIME 20 /* miliseconds */

uint8_t debounce(uint8_t button) {
  if (bit_is_clear(BTN_PIN, button)) { /* button is pressed now */
 10c:	30 99       	sbic	0x06, 0	; 6
 10e:	ea cf       	rjmp	.-44     	; 0xe4 <main+0x1c>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	39 ef       	ldi	r19, 0xF9	; 249
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x4e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x58>
 120:	00 00       	nop
    _delay_ms(DEBOUNCE_TIME);
    if (bit_is_clear(BTN_PIN, button)) { /* still pressed */
 122:	30 99       	sbic	0x06, 0	; 6
 124:	df cf       	rjmp	.-66     	; 0xe4 <main+0x1c>
  uint8_t counter = 0;

  while (1) {

    if (debounce(BTN_RESET)) {
        LED_PORT = 0b00000000;
 126:	1b b8       	out	0x0b, r1	; 11
 128:	db cf       	rjmp	.-74     	; 0xe0 <main+0x18>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	39 ef       	ldi	r19, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	21 50       	subi	r18, 0x01	; 1
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x68>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x72>
 13a:	00 00       	nop
#define DEBOUNCE_TIME 20 /* miliseconds */

uint8_t debounce(uint8_t button) {
  if (bit_is_clear(BTN_PIN, button)) { /* button is pressed now */
    _delay_ms(DEBOUNCE_TIME);
    if (bit_is_clear(BTN_PIN, button)) { /* still pressed */
 13c:	31 99       	sbic	0x06, 1	; 6
 13e:	d4 cf       	rjmp	.-88     	; 0xe8 <main+0x20>
  while (1) {

    if (debounce(BTN_RESET)) {
        LED_PORT = 0b00000000;
    } else if (debounce(BTN_NEXT)) {
        LED_PORT = ((++counter) ^ (counter >> 1));
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	98 2f       	mov	r25, r24
 144:	96 95       	lsr	r25
 146:	98 27       	eor	r25, r24
 148:	9b b9       	out	0x0b, r25	; 11
 14a:	ca cf       	rjmp	.-108    	; 0xe0 <main+0x18>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
