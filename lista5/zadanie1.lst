
zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  00000216  2**0
                  ALLOC
  3 .stab         00000660  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cbd  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000211e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	24 e0       	ldi	r18, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 3e       	cpi	r26, 0xEA	; 234
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer0_init>:

uint8_t tab[1000];
volatile uint16_t num=0;

void timer0_init(){
  TCCR0B |= _BV(CS01) | _BV(CS00);
  90:	85 b5       	in	r24, 0x25	; 37
  92:	83 60       	ori	r24, 0x03	; 3
  94:	85 bd       	out	0x25, r24	; 37
  TIMSK0 |= _BV(OCIE0A);
  96:	ee e6       	ldi	r30, 0x6E	; 110
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	80 83       	st	Z, r24
  OCR0A = 124;
  a0:	8c e7       	ldi	r24, 0x7C	; 124
  a2:	87 bd       	out	0x27, r24	; 39
  TCCR0A |= _BV(WGM01);
  a4:	84 b5       	in	r24, 0x24	; 36
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36
  aa:	08 95       	ret

000000ac <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
  //bufor cykliczny
  if(num>=1000)
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c8:	88 3e       	cpi	r24, 0xE8	; 232
  ca:	93 40       	sbci	r25, 0x03	; 3
  cc:	50 f0       	brcs	.+20     	; 0xe2 <__vector_14+0x36>
    num-=1000;
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d6:	88 5e       	subi	r24, 0xE8	; 232
  d8:	93 40       	sbci	r25, 0x03	; 3
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  if(tab[num])
  e2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  e6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
  ea:	ee 5f       	subi	r30, 0xFE	; 254
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	e9 f0       	breq	.+58     	; 0x12e <__vector_14+0x82>
    LED_PORT |=PD2;
  f4:	59 9a       	sbi	0x0b, 1	; 11
  else
    LED_PORT &=!PD2;
  //czy naciśnięto guzik 
  if (!(PIND & 0b00010000) ){
  f6:	4c 9b       	sbis	0x09, 4	; 9
  f8:	1e c0       	rjmp	.+60     	; 0x136 <__vector_14+0x8a>
    tab[num]=1;
  } else 
    tab[num]=0;
  fa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  fe:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 102:	ee 5f       	subi	r30, 0xFE	; 254
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	10 82       	st	Z, r1
  num++;
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti
  if(num>=1000)
    num-=1000;
  if(tab[num])
    LED_PORT |=PD2;
  else
    LED_PORT &=!PD2;
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	1b b8       	out	0x0b, r1	; 11
  //czy naciśnięto guzik 
  if (!(PIND & 0b00010000) ){
 132:	4c 99       	sbic	0x09, 4	; 9
 134:	e2 cf       	rjmp	.-60     	; 0xfa <__vector_14+0x4e>
    tab[num]=1;
 136:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 13a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 13e:	ee 5f       	subi	r30, 0xFE	; 254
 140:	fe 4f       	sbci	r31, 0xFE	; 254
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
 146:	e0 cf       	rjmp	.-64     	; 0x108 <__vector_14+0x5c>

00000148 <main>:
  num++;
}

int main(){
  //konfigurowanie portow
  BUTTON_PORT |= (1 << BUTTON);
 148:	2d 9a       	sbi	0x05, 5	; 5
  LED_DDR |= (1 << LED);
 14a:	57 9a       	sbi	0x0a, 7	; 10
  
  // ustaw tryb uśpienia na tryb bezczynności
  set_sleep_mode(SLEEP_MODE_IDLE);
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	81 7f       	andi	r24, 0xF1	; 241
 150:	83 bf       	out	0x33, r24	; 51
  // odmaskuj przerwania
  sei();
 152:	78 94       	sei

uint8_t tab[1000];
volatile uint16_t num=0;

void timer0_init(){
  TCCR0B |= _BV(CS01) | _BV(CS00);
 154:	85 b5       	in	r24, 0x25	; 37
 156:	83 60       	ori	r24, 0x03	; 3
 158:	85 bd       	out	0x25, r24	; 37
  TIMSK0 |= _BV(OCIE0A);
 15a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
  OCR0A = 124;
 164:	8c e7       	ldi	r24, 0x7C	; 124
 166:	87 bd       	out	0x27, r24	; 39
  TCCR0A |= _BV(WGM01);
 168:	84 b5       	in	r24, 0x24	; 36
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	84 bd       	out	0x24, r24	; 36
  // odmaskuj przerwania
  sei();
  // program testowany
  timer0_init();
  while(1) {
    sleep_mode();
 16e:	83 b7       	in	r24, 0x33	; 51
 170:	81 60       	ori	r24, 0x01	; 1
 172:	83 bf       	out	0x33, r24	; 51
 174:	88 95       	sleep
 176:	83 b7       	in	r24, 0x33	; 51
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	83 bf       	out	0x33, r24	; 51
 17c:	f8 cf       	rjmp	.-16     	; 0x16e <main+0x26>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
