
zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000040a  2**0
                  ALLOC
  3 .stab         0000069c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d0b  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000017b3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	93 14       	cp	r9, r3
  6a:	93 14       	cp	r9, r3
  6c:	d3 15       	cp	r29, r3
  6e:	83 18       	sub	r8, r3
  70:	83 18       	sub	r8, r3
  72:	d3 15       	cp	r29, r3
  74:	93 14       	cp	r9, r3
  76:	53 12       	cpse	r5, r19
  78:	53 10       	cpse	r5, r3
  7a:	53 10       	cpse	r5, r3
  7c:	53 12       	cpse	r5, r19
  7e:	93 14       	cp	r9, r3
  80:	93 14       	cp	r9, r3
  82:	07 00       	.word	0x0007	; ????
  84:	57 12       	cpse	r5, r23
  86:	51 12       	cpse	r5, r17
  88:	93 14       	cp	r9, r3
  8a:	93 14       	cp	r9, r3
  8c:	d3 15       	cp	r29, r3
  8e:	83 18       	sub	r8, r3
  90:	83 18       	sub	r8, r3
  92:	d3 15       	cp	r29, r3
  94:	93 14       	cp	r9, r3
  96:	53 12       	cpse	r5, r19
  98:	53 10       	cpse	r5, r3
  9a:	53 10       	cpse	r5, r3
  9c:	53 12       	cpse	r5, r19
  9e:	93 14       	cp	r9, r3
  a0:	53 12       	cpse	r5, r19
  a2:	07 00       	.word	0x0007	; ????
  a4:	57 10       	cpse	r5, r7
  a6:	51 10       	cpse	r5, r1
  a8:	53 12       	cpse	r5, r19
  aa:	53 12       	cpse	r5, r19
  ac:	93 14       	cp	r9, r3
  ae:	53 10       	cpse	r5, r3
  b0:	53 12       	cpse	r5, r19
  b2:	97 14       	cp	r9, r7
  b4:	d7 15       	cp	r29, r7
  b6:	93 14       	cp	r9, r3
  b8:	53 10       	cpse	r5, r3
  ba:	53 12       	cpse	r5, r19
  bc:	97 14       	cp	r9, r7
  be:	d7 15       	cp	r29, r7
  c0:	93 14       	cp	r9, r3
  c2:	53 12       	cpse	r5, r19
  c4:	53 10       	cpse	r5, r3
  c6:	53 12       	cpse	r5, r19
  c8:	81 18       	sub	r8, r1
  ca:	92 14       	cp	r9, r2
  cc:	97 14       	cp	r9, r7
  ce:	d3 15       	cp	r29, r3
  d0:	83 18       	sub	r8, r3
  d2:	83 18       	sub	r8, r3
  d4:	d3 15       	cp	r29, r3
  d6:	93 14       	cp	r9, r3
  d8:	53 12       	cpse	r5, r19
  da:	53 10       	cpse	r5, r3
  dc:	53 10       	cpse	r5, r3
  de:	53 12       	cpse	r5, r19
  e0:	93 14       	cp	r9, r3
  e2:	53 12       	cpse	r5, r19
  e4:	07 00       	.word	0x0007	; ????
  e6:	57 10       	cpse	r5, r7
  e8:	51 10       	cpse	r5, r1

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a1 30       	cpi	r26, 0x01	; 1
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 89 00 	call	0x112	; 0x112 <main>
 10a:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <main>:
};

#endif


int main(){
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <main+0x6>
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x8>
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0xa>
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62

  BUZZ_DDR |= _BV(BUZZ); 
 120:	25 9a       	sbi	0x04, 5	; 4

  TEMPO = 50;
 122:	82 e3       	ldi	r24, 0x32	; 50
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 128:	62 e3       	ldi	r22, 0x32	; 50
 12a:	c6 2e       	mov	r12, r22
 12c:	d1 2c       	mov	r13, r1
 12e:	e1 2c       	mov	r14, r1
 130:	f1 2c       	mov	r15, r1
 132:	88 e6       	ldi	r24, 0x68	; 104
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	9e 83       	std	Y+6, r25	; 0x06
 138:	8d 83       	std	Y+5, r24	; 0x05
  while(1) {

    for (int i = 0; i < SONG_SIZE; i++) {  

#ifdef zapakowane
      uint16_t packed = pgm_read_dword(&utwor[i]);
 13a:	ed 81       	ldd	r30, Y+5	; 0x05
 13c:	fe 81       	ldd	r31, Y+6	; 0x06
 13e:	85 91       	lpm	r24, Z+
 140:	95 91       	lpm	r25, Z+
 142:	a5 91       	lpm	r26, Z+
 144:	b4 91       	lpm	r27, Z

		  uint32_t note = UNPACK_NOTE(packed);
 146:	9c 01       	movw	r18, r24
 148:	32 95       	swap	r19
 14a:	22 95       	swap	r18
 14c:	2f 70       	andi	r18, 0x0F	; 15
 14e:	23 27       	eor	r18, r19
 150:	3f 70       	andi	r19, 0x0F	; 15
 152:	23 27       	eor	r18, r19
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
      uint32_t time = UNPACK_TIME(packed);
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	99 27       	eor	r25, r25
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	4c 01       	movw	r8, r24
 160:	a1 2c       	mov	r10, r1
 162:	b1 2c       	mov	r11, r1
		  uint32_t note = pgm_read_word(&utwor[i][0]);
      uint32_t time = pgm_read_word(&utwor[i][1]);

#endif

      uint32_t step = (note > 0) ? 1000000/note : 1;
 164:	21 15       	cp	r18, r1
 166:	31 05       	cpc	r19, r1
 168:	09 f4       	brne	.+2      	; 0x16c <main+0x5a>
 16a:	73 c0       	rjmp	.+230    	; 0x252 <main+0x140>
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	60 e4       	ldi	r22, 0x40	; 64
 172:	72 e4       	ldi	r23, 0x42	; 66
 174:	8f e0       	ldi	r24, 0x0F	; 15
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__udivmodsi4>
 17c:	29 01       	movw	r4, r18
 17e:	3a 01       	movw	r6, r20
        while(j--)
          _delay_us(1);

      } else {

        for (uint32_t k = 0; k < (60*(1000000/TEMPO))/(time*step); k++) {
 180:	a5 01       	movw	r20, r10
 182:	94 01       	movw	r18, r8
 184:	c3 01       	movw	r24, r6
 186:	b2 01       	movw	r22, r4
 188:	0e 94 4e 01 	call	0x29c	; 0x29c <__mulsi3>
 18c:	69 83       	std	Y+1, r22	; 0x01
 18e:	7a 83       	std	Y+2, r23	; 0x02
 190:	8b 83       	std	Y+3, r24	; 0x03
 192:	9c 83       	std	Y+4, r25	; 0x04
 194:	60 e4       	ldi	r22, 0x40	; 64
 196:	72 e4       	ldi	r23, 0x42	; 66
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	a7 01       	movw	r20, r14
 19e:	96 01       	movw	r18, r12
 1a0:	0e 94 80 01 	call	0x300	; 0x300 <__divmodsi4>
 1a4:	ac e3       	ldi	r26, 0x3C	; 60
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	0e 94 9f 01 	call	0x33e	; 0x33e <__muluhisi3>
 1ac:	29 81       	ldd	r18, Y+1	; 0x01
 1ae:	3a 81       	ldd	r19, Y+2	; 0x02
 1b0:	4b 81       	ldd	r20, Y+3	; 0x03
 1b2:	5c 81       	ldd	r21, Y+4	; 0x04
 1b4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__udivmodsi4>
 1b8:	23 2b       	or	r18, r19
 1ba:	24 2b       	or	r18, r20
 1bc:	25 2b       	or	r18, r21
 1be:	09 f4       	brne	.+2      	; 0x1c2 <main+0xb0>
 1c0:	3e c0       	rjmp	.+124    	; 0x23e <main+0x12c>
 1c2:	76 94       	lsr	r7
 1c4:	67 94       	ror	r6
 1c6:	57 94       	ror	r5
 1c8:	47 94       	ror	r4
 1ca:	81 2c       	mov	r8, r1
 1cc:	91 2c       	mov	r9, r1
 1ce:	54 01       	movw	r10, r8
          BUZZ_PORT |= _BV(BUZZ);
 1d0:	2d 9a       	sbi	0x05, 5	; 5
 1d2:	d3 01       	movw	r26, r6
 1d4:	c2 01       	movw	r24, r4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	25 e0       	ldi	r18, 0x05	; 5
 1d8:	2a 95       	dec	r18
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0xc6>
 1dc:	00 00       	nop
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	a1 09       	sbc	r26, r1
 1e2:	b1 09       	sbc	r27, r1

          uint32_t j = step/2;
          while (j--)
 1e4:	c1 f7       	brne	.-16     	; 0x1d6 <main+0xc4>
            _delay_us(1); 

          BUZZ_PORT &= ~_BV(BUZZ);
 1e6:	2d 98       	cbi	0x05, 5	; 5
 1e8:	d3 01       	movw	r26, r6
 1ea:	c2 01       	movw	r24, r4
 1ec:	25 e0       	ldi	r18, 0x05	; 5
 1ee:	2a 95       	dec	r18
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0xdc>
 1f2:	00 00       	nop
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	a1 09       	sbc	r26, r1
 1f8:	b1 09       	sbc	r27, r1

          j = step/2;
          while (j--)
 1fa:	c1 f7       	brne	.-16     	; 0x1ec <main+0xda>
        while(j--)
          _delay_us(1);

      } else {

        for (uint32_t k = 0; k < (60*(1000000/TEMPO))/(time*step); k++) {
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	88 1a       	sub	r8, r24
 200:	98 0a       	sbc	r9, r24
 202:	a8 0a       	sbc	r10, r24
 204:	b8 0a       	sbc	r11, r24
 206:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <_edata>
 20a:	d1 2c       	mov	r13, r1
 20c:	e1 2c       	mov	r14, r1
 20e:	f1 2c       	mov	r15, r1
 210:	60 e4       	ldi	r22, 0x40	; 64
 212:	72 e4       	ldi	r23, 0x42	; 66
 214:	8f e0       	ldi	r24, 0x0F	; 15
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	a7 01       	movw	r20, r14
 21a:	96 01       	movw	r18, r12
 21c:	0e 94 80 01 	call	0x300	; 0x300 <__divmodsi4>
 220:	ac e3       	ldi	r26, 0x3C	; 60
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	0e 94 9f 01 	call	0x33e	; 0x33e <__muluhisi3>
 228:	29 81       	ldd	r18, Y+1	; 0x01
 22a:	3a 81       	ldd	r19, Y+2	; 0x02
 22c:	4b 81       	ldd	r20, Y+3	; 0x03
 22e:	5c 81       	ldd	r21, Y+4	; 0x04
 230:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__udivmodsi4>
 234:	82 16       	cp	r8, r18
 236:	93 06       	cpc	r9, r19
 238:	a4 06       	cpc	r10, r20
 23a:	b5 06       	cpc	r11, r21
 23c:	48 f2       	brcs	.-110    	; 0x1d0 <main+0xbe>
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	9e 81       	ldd	r25, Y+6	; 0x06
 242:	02 96       	adiw	r24, 0x02	; 2
 244:	9e 83       	std	Y+6, r25	; 0x06
 246:	8d 83       	std	Y+5, r24	; 0x05
  TEMPO = 50;


  while(1) {

    for (int i = 0; i < SONG_SIZE; i++) {  
 248:	8a 5e       	subi	r24, 0xEA	; 234
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	09 f0       	breq	.+2      	; 0x250 <main+0x13e>
 24e:	75 cf       	rjmp	.-278    	; 0x13a <main+0x28>
 250:	70 cf       	rjmp	.-288    	; 0x132 <main+0x20>

      uint32_t step = (note > 0) ? 1000000/note : 1;

      if (note == N_PS) {

        uint32_t j = 60*(1000000/TEMPO)/time;
 252:	60 e4       	ldi	r22, 0x40	; 64
 254:	72 e4       	ldi	r23, 0x42	; 66
 256:	8f e0       	ldi	r24, 0x0F	; 15
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	a7 01       	movw	r20, r14
 25c:	96 01       	movw	r18, r12
 25e:	0e 94 80 01 	call	0x300	; 0x300 <__divmodsi4>
 262:	ac e3       	ldi	r26, 0x3C	; 60
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	0e 94 9f 01 	call	0x33e	; 0x33e <__muluhisi3>
 26a:	a5 01       	movw	r20, r10
 26c:	94 01       	movw	r18, r8
 26e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__udivmodsi4>

        while(j--)
 272:	21 15       	cp	r18, r1
 274:	31 05       	cpc	r19, r1
 276:	41 05       	cpc	r20, r1
 278:	51 05       	cpc	r21, r1
 27a:	09 f3       	breq	.-62     	; 0x23e <main+0x12c>
 27c:	da 01       	movw	r26, r20
 27e:	c9 01       	movw	r24, r18
 280:	25 e0       	ldi	r18, 0x05	; 5
 282:	2a 95       	dec	r18
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0x170>
 286:	00 00       	nop
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	a1 09       	sbc	r26, r1
 28c:	b1 09       	sbc	r27, r1
 28e:	c1 f7       	brne	.-16     	; 0x280 <main+0x16e>
 290:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <_edata>
 294:	d1 2c       	mov	r13, r1
 296:	e1 2c       	mov	r14, r1
 298:	f1 2c       	mov	r15, r1
 29a:	d1 cf       	rjmp	.-94     	; 0x23e <main+0x12c>

0000029c <__mulsi3>:
 29c:	db 01       	movw	r26, r22
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	0e 94 9f 01 	call	0x33e	; 0x33e <__muluhisi3>
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	a2 9f       	mul	r26, r18
 2ac:	80 0d       	add	r24, r0
 2ae:	91 1d       	adc	r25, r1
 2b0:	a3 9f       	mul	r26, r19
 2b2:	90 0d       	add	r25, r0
 2b4:	b2 9f       	mul	r27, r18
 2b6:	90 0d       	add	r25, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	08 95       	ret

000002bc <__udivmodsi4>:
 2bc:	a1 e2       	ldi	r26, 0x21	; 33
 2be:	1a 2e       	mov	r1, r26
 2c0:	aa 1b       	sub	r26, r26
 2c2:	bb 1b       	sub	r27, r27
 2c4:	fd 01       	movw	r30, r26
 2c6:	0d c0       	rjmp	.+26     	; 0x2e2 <__udivmodsi4_ep>

000002c8 <__udivmodsi4_loop>:
 2c8:	aa 1f       	adc	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	ee 1f       	adc	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	a2 17       	cp	r26, r18
 2d2:	b3 07       	cpc	r27, r19
 2d4:	e4 07       	cpc	r30, r20
 2d6:	f5 07       	cpc	r31, r21
 2d8:	20 f0       	brcs	.+8      	; 0x2e2 <__udivmodsi4_ep>
 2da:	a2 1b       	sub	r26, r18
 2dc:	b3 0b       	sbc	r27, r19
 2de:	e4 0b       	sbc	r30, r20
 2e0:	f5 0b       	sbc	r31, r21

000002e2 <__udivmodsi4_ep>:
 2e2:	66 1f       	adc	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	88 1f       	adc	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	1a 94       	dec	r1
 2ec:	69 f7       	brne	.-38     	; 0x2c8 <__udivmodsi4_loop>
 2ee:	60 95       	com	r22
 2f0:	70 95       	com	r23
 2f2:	80 95       	com	r24
 2f4:	90 95       	com	r25
 2f6:	9b 01       	movw	r18, r22
 2f8:	ac 01       	movw	r20, r24
 2fa:	bd 01       	movw	r22, r26
 2fc:	cf 01       	movw	r24, r30
 2fe:	08 95       	ret

00000300 <__divmodsi4>:
 300:	05 2e       	mov	r0, r21
 302:	97 fb       	bst	r25, 7
 304:	1e f4       	brtc	.+6      	; 0x30c <__divmodsi4+0xc>
 306:	00 94       	com	r0
 308:	0e 94 97 01 	call	0x32e	; 0x32e <__negsi2>
 30c:	57 fd       	sbrc	r21, 7
 30e:	07 d0       	rcall	.+14     	; 0x31e <__divmodsi4_neg2>
 310:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__udivmodsi4>
 314:	07 fc       	sbrc	r0, 7
 316:	03 d0       	rcall	.+6      	; 0x31e <__divmodsi4_neg2>
 318:	4e f4       	brtc	.+18     	; 0x32c <__divmodsi4_exit>
 31a:	0c 94 97 01 	jmp	0x32e	; 0x32e <__negsi2>

0000031e <__divmodsi4_neg2>:
 31e:	50 95       	com	r21
 320:	40 95       	com	r20
 322:	30 95       	com	r19
 324:	21 95       	neg	r18
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	4f 4f       	sbci	r20, 0xFF	; 255
 32a:	5f 4f       	sbci	r21, 0xFF	; 255

0000032c <__divmodsi4_exit>:
 32c:	08 95       	ret

0000032e <__negsi2>:
 32e:	90 95       	com	r25
 330:	80 95       	com	r24
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	8f 4f       	sbci	r24, 0xFF	; 255
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	08 95       	ret

0000033e <__muluhisi3>:
 33e:	0e 94 aa 01 	call	0x354	; 0x354 <__umulhisi3>
 342:	a5 9f       	mul	r26, r21
 344:	90 0d       	add	r25, r0
 346:	b4 9f       	mul	r27, r20
 348:	90 0d       	add	r25, r0
 34a:	a4 9f       	mul	r26, r20
 34c:	80 0d       	add	r24, r0
 34e:	91 1d       	adc	r25, r1
 350:	11 24       	eor	r1, r1
 352:	08 95       	ret

00000354 <__umulhisi3>:
 354:	a2 9f       	mul	r26, r18
 356:	b0 01       	movw	r22, r0
 358:	b3 9f       	mul	r27, r19
 35a:	c0 01       	movw	r24, r0
 35c:	a3 9f       	mul	r26, r19
 35e:	70 0d       	add	r23, r0
 360:	81 1d       	adc	r24, r1
 362:	11 24       	eor	r1, r1
 364:	91 1d       	adc	r25, r1
 366:	b2 9f       	mul	r27, r18
 368:	70 0d       	add	r23, r0
 36a:	81 1d       	adc	r24, r1
 36c:	11 24       	eor	r1, r1
 36e:	91 1d       	adc	r25, r1
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
